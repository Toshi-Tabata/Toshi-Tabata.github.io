{"version":3,"sources":["serviceWorker.ts","views/notFound.tsx","components/HighlightCode.tsx","components/first_page.tsx","components/second_page.tsx","components/third_page.tsx","views/ResumePage.tsx","components/temp.tsx","components/notes.tsx","router.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","NotFound","typingSpeed","TypeWriter","props","useState","state","setState","useEffect","timer","curr","startTyping","hljs","highlight","message","substring","value","setTimeout","clearTimeout","id","dangerouslySetInnerHTML","__html","FirstPage","SecondPage","to","ThirdPage","ResumePage","CONSTANTS","DELETING_SPEED","TYPING_SPEED","messages","heading","registerLanguage","javascript","text","isDeleting","loopNum","getCurrentText","currentState","length","handleType","cs","data","Number","document","querySelectorAll","getElementById","highlightBlock","NotesPage","WebsiteRouter","basename","process","exact","path","component","third_page","Component","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a563cb6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. ResumePage is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <h2>Not Found</h2>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport \"../styles/darcula.css\";\r\nimport \"../style/typewriter.css\"\r\nimport hljs from \"highlight.js\"\r\n\r\nconst typingSpeed = 50;\r\nexport default function TypeWriter(props) {\r\n    // Track what the current substring being displayed is\r\n    const [state, setState] = useState(\"\");\r\n\r\n    // Start typeWriter loop\r\n    \r\n    useEffect(() =>\r\n        {\r\n            let curr = 0;\r\n            let timer: NodeJS.Timeout;\r\n            function getCurrText() {\r\n                curr++;\r\n                // not ideal with jsx elements since hljs removes its own styling elems while the next elem is being typed\r\n                return hljs.highlight(\"javascript\", props.message.substring(0, curr)).value;\r\n            }\r\n            function startTyping() {\r\n                setState(getCurrText());\r\n                timer = setTimeout(startTyping, typingSpeed);\r\n            }\r\n            startTyping();\r\n\r\n            return () => {clearTimeout(timer)};\r\n\r\n            // note props.message does not update. This is just a componentDidMount\r\n            // added here since it's a dependency for the array\r\n        }, [props.message]\r\n    );\r\n\r\n\r\n    return(\r\n        <div id={\"mainPageCode\"}>\r\n            <pre><code dangerouslySetInnerHTML={{__html: state}}/></pre>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"../style/first_page.css\"\r\nimport TypeWriter from \"./HighlightCode\";\r\n\r\nexport default function FirstPage() {\r\n    return (\r\n        <div id={\"first_page\"}>\r\n            <div id={\"myNameParent\"}>\r\n                <div id={\"myName\"}> Toshi Tabata </div>\r\n            </div>\r\n            <TypeWriter message={\r\n`import React, {useEffect, useState} from \"react\";\r\nimport \"../styles/darcula.css\";\r\nimport \"../style/typewriter.css\"\r\nimport Highlight from \"./highlight\";\r\n\r\nconst typingSpeed = 100;\r\nexport default function TypeWriter(props) {\r\n    const [state, setState] = useState(\"\");\r\n    // Start typeWriter loop\r\n    useEffect(() => {\r\n            let timer:any = \"\";\r\n            function startTyping() {\r\n                setState(currState => (\r\n                    getCurrText(currState)\r\n                ));\r\n                timer = setTimeout(startTyping, typingSpeed)\r\n            }\r\n            startTyping();\r\n            return () => clearTimeout(timer);\r\n        }, []\r\n    );\r\n\r\n    function getCurrText(state) {\r\n        return props.message.substring(0, state.length + 1);\r\n    }\r\n    return(\r\n        <div>\r\n            <pre>{state}</pre>\r\n        </div>\r\n    );\r\n}`\r\n            }>\r\n            </TypeWriter>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"../style/second_page.css\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nexport default function SecondPage() {\r\n\r\n    return (\r\n        <div id={\"second_page\"}>\r\n            second page hihi! testing 3\r\n\r\n            <Link  to={\"/notes\"}>\r\n                <button>notes</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"../style/third_page.css\"\r\n\r\nexport default function ThirdPage() {\r\n    return (\r\n        <div id={\"third_page\"}>\r\n            Third Pepage\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport '../style/ResumePage.css';\nimport FirstPage from \"../components/first_page\";\nimport SecondPage from \"../components/second_page\";\nimport ThirdPage from \"../components/third_page\";\n\nconst ResumePage: React.FC = () => {\n    return (\n        <div id={\"pages\"}>\n            <FirstPage/>\n            <SecondPage/>\n            <ThirdPage/>\n\n\n        </div>\n    );\n};\n\nexport default ResumePage;\n","import React, {useState, useEffect} from \"react\";\r\nimport hljs from \"highlight.js/lib/highlight\";\r\nimport javascript from \"highlight.js/lib/languages/javascript\";\r\nimport \"../styles/darcula.css\";\r\n\r\n// smaller is faster\r\nconst CONSTANTS = {\r\n    DELETING_SPEED: 30,\r\n    TYPING_SPEED: 150,\r\n};\r\n\r\ninterface argTypes {\r\n    messages: string[],\r\n    heading: string\r\n}\r\n\r\n// TODO: give actual typing to function args instead of :any\r\n// TODO: handle newlines\r\nexport default function TypeWriter ({messages, heading}: argTypes) {\r\n    hljs.registerLanguage(\"javascript\", javascript);\r\n    const [state, setState] = useState({\r\n        text: \"\",\r\n        message: \"\",\r\n        isDeleting: false,\r\n        loopNum: 0,\r\n        typingSpeed: CONSTANTS.TYPING_SPEED,\r\n    });\r\n\r\n    const [foo, setFoo] = useState(\"bar\");\r\n\r\n    // only updates when we switch from deleting to typing\r\n    // if we're not switching, we're stuck in the handleType() loop\r\n    useEffect(() => {\r\n        let timer: any = \"\";\r\n        const handleType = () => {\r\n            setState(cs => ({\r\n                // set the new currentState to whatever the current state is, only changing text and typingSpeed\r\n                ...cs, // cs means currentState\r\n                text: getCurrentText(cs),\r\n                typingSpeed: getTypingSpeed(cs)\r\n            }));\r\n\r\n            // call handleType after typingSpeed milliseconds, then store the timer ID so we can clear it later\r\n            timer = setTimeout(handleType, state.typingSpeed);\r\n        };\r\n        handleType(); // calls the handleType function so that it actually runs LOL\r\n        return () => clearTimeout(timer); // when component dismounts, clear the timer\r\n    }, [state.isDeleting]); // only run useEffect() if state.isDeleting changes\r\n\r\n\r\n    // Anytime there's an update, check if we need to start/stop deleting\r\n    useEffect(() => {\r\n        if (!state.isDeleting && state.text === state.message) {\r\n            setTimeout(() => {\r\n                setState(cs => ({\r\n                    ...cs,\r\n                    isDeleting: true\r\n                }))\r\n            }, 500);\r\n        } else if (state.isDeleting && state.text === \"\") {\r\n            setState(cs => ({\r\n                ...cs, // cs means currentState\r\n                isDeleting: false,\r\n                loopNum: cs.loopNum + 1,\r\n                message: getMessage(cs, messages)\r\n            }));\r\n        }\r\n    }, [state.text, state.message, state.isDeleting, messages]);\r\n\r\n    // Gets the current string +- an extra character\r\n    // TODO: this is where I should parse my text properly\r\n    function getCurrentText(currentState: any) {\r\n        let str = currentState.isDeleting\r\n            ? currentState.message.substring(0, currentState.text.length - 1)\r\n            : currentState.message.substring(0, currentState.text.length + 1);\r\n        return str\r\n    }\r\n\r\n    function getMessage(currentState: any, data: any) {\r\n        // get the current string we are typing out (input can have multiple strings in the string array)\r\n        // if only 1 message in the string array passed into this component, this returns the same string\r\n        return data[Number(currentState.loopNum) % Number(data.length)]; // Number() converts the strings into numbers\r\n    }\r\n\r\n    function getTypingSpeed(currentState: any) {\r\n        return currentState.isDeleting\r\n            ? CONSTANTS.TYPING_SPEED\r\n            : CONSTANTS.DELETING_SPEED;\r\n    }\r\n\r\n    useEffect(() => {\r\n        // anytime there's an update, update the pre code codeblock\r\n        const preCodeBlocks = document.querySelectorAll(\"pre code\");\r\n        const id = document.getElementById(\"text\");\r\n        // highlight syntax within these preCode blocks\r\n        hljs.highlightBlock(id);\r\n        // preCodeBlocks.forEach(block => {\r\n        //     hljs.highlightBlock(block);\r\n        //\r\n        // }) ;\r\n\r\n\r\n    });\r\n\r\n\r\n    return (\r\n        <h1>\r\n            {heading}\r\n            <pre>\r\n                <code>\r\n                    <div id={\"text\"}> {state.text} </div>\r\n                    <span id=\"cursor\" />\r\n                </code>\r\n            </pre>\r\n        </h1>\r\n    );\r\n}","import React from \"react\";\r\nimport Typewriter from \"./temp\"\r\n\r\n\r\nexport default function NotesPage() {\r\n\r\n    return (\r\n        <div id={\"first_page\"}>\r\n            <Typewriter\r\n                messages={[\"first message\", \"hi\"]}\r\n                heading={\"hi\"}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport NotFound from \"./views/notFound\";\r\nimport ResumePage from \"./views/ResumePage\"\r\nimport third_page from \"./components/third_page\";\r\nimport NotesPage from \"./components/notes\";\r\n\r\nexport default class WebsiteRouter extends Component{\r\n    render(){\r\n        return(\r\n            <Router basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                    <Route exact path = {\"/\"} component={ResumePage}/>\r\n                    <Route path={\"/404\"} component={NotFound}/>\r\n                    <Route path={process.env.PUBLIC_URL + \"/hi\"} component={third_page}/>\r\n                    <Route path={\"/ho\"} component={third_page}/>\r\n                    <Route path={\"/hop/\"} component={third_page}/>\r\n                    <Route path={\"/home/hu\"} component={third_page}/>\r\n                    <Route path={\"/notes\"} component={NotesPage}/>\r\n                    <Redirect to={\"/404\"}/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport WebsiteRouter from \"./router\";\n\n\nReactDOM.render(<WebsiteRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}